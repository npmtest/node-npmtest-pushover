{"/home/travis/build/npmtest/node-npmtest-pushover/test.js":"/* istanbul instrument in package npmtest_pushover */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pushover/lib.npmtest_pushover.js":"/* istanbul instrument in package npmtest_pushover */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_pushover = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_pushover = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-pushover/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-pushover && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_pushover */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_pushover\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_pushover.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_pushover.rollup.js'] =\n            local.assetsDict['/assets.npmtest_pushover.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_pushover.__dirname + '/lib.npmtest_pushover.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pushover/node_modules/pushover/index.js":"var fs = require('fs');\nvar path = require('path');\nvar http = require('http');\nvar mkdirp = require('mkdirp');\nvar inherits = require('inherits');\n\nvar spawn = require('child_process').spawn;\nvar EventEmitter = require('events').EventEmitter;\n\nvar onexit = require('./lib/onexit');\n\nmodule.exports = function (repoDir, opts) {\n    if (!opts) opts = {};\n    var dirMap = typeof repoDir === 'function'\n        ? repoDir\n        : function (dir) { return path.join(repoDir, dir) }\n    ;\n    return new Git(dirMap, opts);\n};\n\nfunction Git (dirMap, opts) {\n    EventEmitter.call(this);\n\n    this.dirMap = dirMap;\n    this.autoCreate = opts.autoCreate === false ? false : true;\n    this.checkout = opts.checkout;\n}\n\ninherits(Git, EventEmitter);\n\nGit.prototype.list = function (cb) {\n    fs.readdir(this.dirMap(), cb);\n};\n\nGit.prototype.exists = function (repo, cb) {\n    (fs.exists || path.exists)(this.dirMap(repo), cb);\n};\n\nGit.prototype.mkdir = function (dir, cb) {\n    mkdirp(this.dirMap(dir), cb);\n};\n\nGit.prototype.create = function (repo, cb) {\n    var self = this;\n    if (typeof cb !== 'function') cb = function () {};\n    var cwd = process.cwd();\n    \n    if (!/\\.git$/.test(repo)) repo += '.git';\n    \n    self.exists(repo, function (ex) {\n        if (!ex) self.mkdir(repo, next)\n        else next()\n    });\n    \n    function next (err) {\n        if (err) return cb(err);\n        \n        var dir = self.dirMap(repo);\n        if (self.checkout) {\n            var ps = spawn('git', [ 'init', dir ]);\n        }\n        else {\n            var ps = spawn('git', [ 'init', '--bare', dir ]);\n        }\n        \n        var err = '';\n        ps.stderr.on('data', function (buf) { err += buf });\n        \n        onexit(ps, function (code) {\n            if (!cb) {}\n            else if (code) cb(err || true)\n            else cb(null)\n        });\n    }\n};\n\nGit.prototype.handle = require('./lib/handle');\n","/home/travis/build/npmtest/node-npmtest-pushover/node_modules/pushover/lib/onexit.js":"module.exports = function (ps, cb) {\n    var pending = 3;\n    var code, sig;\n    \n    function onend () {\n        if (--pending === 0) cb(code, sig);\n    }\n    ps.on('exit', function (c, s) {\n        code = c;\n        sig = s;\n    });\n    ps.on('exit', onend);\n    ps.stdout.on('end', onend);\n    ps.stderr.on('end', onend);\n};\n","/home/travis/build/npmtest/node-npmtest-pushover/node_modules/pushover/lib/handle.js":"var url = require('url');\nvar qs = require('querystring');\nvar path = require('path');\n\nvar services = [ 'upload-pack', 'receive-pack' ]\n\nvar createAction = require('./service');\nvar noCache = require('./no_cache');\nvar infoResponse = require('./info');\nvar httpDuplex = require('http-duplex');\n\nmodule.exports = function (req, res) {\n    res.setHeader('connection', 'close');\n    var self = this;\n    (function next (ix) {\n        var x = handlers[ix].call(self, req, res);\n        if (x === false) next(ix + 1);\n    })(0);\n};\n\nvar handlers = [];\nhandlers.push(function (req, res) {\n    if (req.method !== 'GET') return false;\n    \n    var u = url.parse(req.url);\n    var m = u.pathname.match(/\\/(.+)\\/info\\/refs$/);\n    if (!m) return false;\n    if (/\\.\\./.test(m[1])) return false;\n    \n    var self = this;\n    \n    var repo = m[1];\n    var params = qs.parse(u.query);\n    \n    if (!params.service) {\n        res.statusCode = 400;\n        res.end('service parameter required');\n        return;\n    }\n    \n    var service = params.service.replace(/^git-/, '');\n    if (services.indexOf(service) < 0) {\n        res.statusCode = 405;\n        res.end('service not available');\n        return;\n    }\n    \n    infoResponse({\n        repos : self,\n        repo : repo,\n        service : service,\n    }, req, res);\n});\n\nhandlers.push(function (req, res) {\n    if (req.method !== 'GET') return false;\n\n    var u = url.parse(req.url);\n    var m = u.pathname.match(/^\\/(.+)\\/HEAD$/);\n    if (!m) return false;\n    if (/\\.\\./.test(m[1])) return false;\n    \n    var self = this;\n    var repo = m[1];\n    \n    var next = function (x) {\n        var file = self.dirMap(path.join(m[1], 'HEAD'));\n        (fs.exists || path.exists)(file, function (ex) {\n            if (ex) fs.createReadStream(file).pipe(res)\n            else {\n                res.statusCode = 404;\n                res.end('not found');\n            }\n        });\n    }\n    \n    self.exists(repo, function (ex) {\n        var anyListeners = self.listeners('head').length > 0;\n        var dup = httpDuplex(req, res);\n        dup.exists = ex;\n        dup.repo = repo;\n        dup.cwd = self.dirMap(repo);\n        \n        dup.accept = dup.emit.bind(dup, 'accept');\n        dup.reject = dup.emit.bind(dup, 'reject');\n        \n        dup.once('reject', function (code) {\n            dup.statusCode = code || 500;\n            dup.end();\n        });\n        \n        if (!ex && self.autoCreate) {\n            dup.once('accept', function (dir) {\n                self.create(dir || repo, next);\n            });\n            self.emit('head', dup);\n            if (!anyListeners) dup.accept();\n        }\n        else if (!ex) {\n            res.statusCode = 404;\n            res.setHeader('content-type', 'text/plain');\n            res.end('repository not found');\n        }\n        else {\n            dup.once('accept', next);\n            self.emit('head', dup);\n            if (!anyListeners) dup.accept();\n        }\n    });\n});\n\nhandlers.push(function (req, res) {\n    if (req.method !== 'POST') return false;\n    var m = req.url.match(/\\/(.+)\\/git-(.+)/);\n    if (!m) return false;\n    if (/\\.\\./.test(m[1])) return false;\n    \n    var self = this;\n    var repo = m[1], service = m[2];\n    \n    if (services.indexOf(service) < 0) {\n        res.statusCode = 405;\n        res.end('service not available');\n        return;\n    }\n    \n    res.setHeader('content-type', 'application/x-git-' + service + '-result');\n    noCache(res);\n    \n    var action = createAction({\n        repo : repo,\n        service : service,\n        cwd : self.dirMap(repo)\n    }, req, res);\n    \n    action.on('header', function () {\n        var evName = action.evName;\n        var anyListeners = self.listeners(evName).length > 0;\n        self.emit(evName, action);\n        if (!anyListeners) action.accept();\n    });\n});\n\nhandlers.push(function (req, res) {\n    if (req.method !== 'GET' && req.method !== 'POST') {\n        res.statusCode = 405;\n        res.end('method not supported');\n    }\n    else return false;\n});\n\nhandlers.push(function (req, res) {\n    res.statusCode = 404;\n    res.end('not found');\n});\n","/home/travis/build/npmtest/node-npmtest-pushover/node_modules/pushover/lib/service.js":"var spawn = require('child_process').spawn;\nvar through = require('through');\nvar inherits = require('inherits');\nvar HttpDuplex = require('http-duplex');\nvar zlib = require('zlib');\n\nvar encodings = {\n    'gzip': function() {return zlib.createGunzip();},\n    'deflate': function() {return zlib.createDeflate();}\n};\n\nmodule.exports = function (opts, req, res) {\n    var service = new Service(opts, req, res);\n    \n    Object.keys(opts).forEach(function (key) {\n        service[key] = opts[key];\n    });\n    return service;\n};\n\nvar headerRE = {\n    'receive-pack' : '([0-9a-fA-F]+) ([0-9a-fA-F]+)'\n        + ' refs\\/(heads|tags)\\/(.*?)( |00|\\u0000)'\n        + '|^(0000)$'\n    ,\n    'upload-pack' : '^\\\\S+ ([0-9a-fA-F]+)'\n};\n\ninherits(Service, HttpDuplex);\n\nfunction Service (opts, req, res) {\n    HttpDuplex.call(this, req, res);\n    var self = this;\n    \n    self.headers = req.headers;\n    self.method = req.method;\n    self.url = req.url;\n    \n    self.status = 'pending';\n    self.repo = opts.repo;\n    self.service = opts.service;\n    self.cwd = opts.cwd;\n    \n    var buffered = through().pause();\n\n    // stream needed to receive data after decoding, but before accepting\n    var ts = through();\n\n    var decoder = encodings[req.headers['content-encoding']];\n    if (decoder) {\n        // data is compressed with gzip or deflate\n        req.pipe(decoder()).pipe(ts).pipe(buffered);\n    } else {\n        // data is not compressed\n        req.pipe(ts).pipe(buffered);\n    }\n    \n    var data = '';\n    ts.once('data', function (buf) {\n        data += buf;\n        \n        var ops = data.match(new RegExp(headerRE[self.service], 'gi'));\n        if (!ops) return;\n        data = undefined;\n       \n        ops.forEach(function(op) {\n            var m = op.match(new RegExp(headerRE[self.service]));\n            if (self.service === 'receive-pack') {\n                self.last = m[1];\n                self.commit = m[2];\n\n                if (m[3] == 'heads') {\n                    var type = 'branch';\n                    self.evName = 'push';\n                } else {\n                    var type = 'version';\n                    self.evName = 'tag';\n                }\n\n                var headers = {\n                    last: self.last,\n                    commit : self.commit\n                };\n                headers[type] = self[type] = m[4];\n                self.emit('header', headers);\n            }\n            else if (self.service === 'upload-pack') {\n                self.commit = m[1];\n                self.evName = 'fetch';\n                self.emit('header', { commit : self.commit });\n            }\n        });\n    });\n    \n    self.once('accept', function () {\n        process.nextTick(function () {\n            var cmd = [ 'git-' + opts.service, '--stateless-rpc', opts.cwd ];\n            var ps = spawn(cmd[0], cmd.slice(1));\n            ps.on('error', function (err) {\n                self.emit('error', new Error(\n                    err.message + ' running command ' + cmd.join(' ')\n                ));\n            });\n            \n            self.emit('service', ps);\n            \n            var respStream = through(function(c) {\n                if (self.listeners('response').length === 0)\n                    return this.queue(c);\n                // prevent git from sending the close signal\n                if (c.length === 4 && c.toString() === '0000')\n                    return;\n                this.queue(c);\n            }, function() {\n                if (self.listeners('response').length > 0)\n                    return;\n                this.queue(null);\n            })\n            \n            function endResponse() {\n                res.queue(new Buffer('0000'));\n                res.queue(null);\n            }\n\n            self.emit('response', respStream, endResponse);\n            ps.stdout.pipe(respStream).pipe(res);\n            \n            buffered.pipe(ps.stdin);\n            buffered.resume();\n            ps.on('exit', self.emit.bind(self, 'exit'));\n        });\n    });\n    \n    self.once('reject', function (code, msg) {\n        res.statusCode = code;\n        res.end(msg);\n    });\n}\n\nService.prototype.accept = function (dir) {\n    if (this.status !== 'pending') return;\n    \n    this.status = 'accepted';\n    this.emit('accept', dir);\n};\n\nService.prototype.reject = function (code, msg) {\n    if (this.status !== 'pending') return;\n    \n    if (msg === undefined && typeof code === 'string') {\n        msg = code;\n        code = 500;\n    }\n    this.status = 'rejected';\n    this.emit('reject', code || 500, msg);\n};\n","/home/travis/build/npmtest/node-npmtest-pushover/node_modules/pushover/lib/no_cache.js":"module.exports = function (res) {\n    res.setHeader('expires', 'Fri, 01 Jan 1980 00:00:00 GMT');\n    res.setHeader('pragma', 'no-cache');\n    res.setHeader('cache-control', 'no-cache, max-age=0, must-revalidate');\n};\n","/home/travis/build/npmtest/node-npmtest-pushover/node_modules/pushover/lib/info.js":"var httpDuplex = require('http-duplex');\nvar spawn = require('child_process').spawn;\n\nvar noCache = require('./no_cache');\nvar onexit = require('./onexit');\n\nmodule.exports = function (opts, req, res) {\n    var self = opts.repos;\n    var dup = httpDuplex(req, res);\n    dup.cwd = self.dirMap(opts.repo);\n    dup.repo = opts.repo;\n    \n    dup.accept = dup.emit.bind(dup, 'accept');\n    dup.reject = dup.emit.bind(dup, 'reject');\n    \n    dup.once('reject', function (code) {\n        res.statusCode = code || 500;\n        res.end();\n    });\n    \n    var anyListeners = self.listeners('info').length > 0;\n    \n    self.exists(opts.repo, function (ex) {\n        dup.exists = ex;\n        \n        if (!ex && self.autoCreate) {\n            dup.once('accept', function () {\n                self.create(opts.repo, next);\n            });\n            \n            self.emit('info', dup);\n            if (!anyListeners) dup.accept();\n        }\n        else if (!ex) {\n            res.statusCode = 404;\n            res.setHeader('content-type', 'text/plain');\n            res.end('repository not found');\n        }\n        else {\n            dup.once('accept', next);\n            self.emit('info', dup);\n            \n            if (!anyListeners) dup.accept();\n        }\n    });\n    \n    function next () {\n        res.setHeader(\n            'content-type',\n            'application/x-git-' + opts.service + '-advertisement'\n        );\n        noCache(res);\n        var d = self.dirMap(opts.repo);\n        serviceRespond(self, opts.service, d, res);\n    }\n}\n\nfunction serviceRespond (self, service, file, res) {\n    function pack (s) {\n        var n = (4 + s.length).toString(16);\n        return Array(4 - n.length + 1).join('0') + n + s;\n    }\n    res.write(pack('# service=git-' + service + '\\n'));\n    res.write('0000');\n    \n    var cmd = [ 'git-' + service, '--stateless-rpc', '--advertise-refs', file ];\n    var ps = spawn(cmd[0], cmd.slice(1));\n    ps.on('error', function (err) {\n        self.emit('error', new Error(\n            err.message + ' running command ' + cmd.join(' ')\n        ));\n    });\n    ps.stdout.pipe(res);\n}\n"}